generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String
  password      String?
  profilePic    String?     @map("profile_pic")
  accountType   AccountType @default(user) @map("account_type")
  article       Article[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  buyedArticles Orders[]    @relation("buyedArticles")
  saledArticles Orders[]    @relation("saledArticles")
}

model Article {
  id                String              @id @default(cuid())
  name              String
  price             Float               @db.DoublePrecision
  picture           String
  description       String
  ingredients       String
  userId            String
  user              User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  articleOrders     OrdersArticles[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ArticleCategories ArticleCategories[]
}

model OrdersArticles {
  id        String   @id @default(cuid())
  amount    Int
  price     Float
  orderId   String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order     Orders   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id             String           @id @default(cuid())
  paymentMethod  PaymentMethods
  totalPrice     Float
  status         OrderStatus      @default(orderReceived)
  userId         String
  companyId      String
  ordersArticles OrdersArticles[]
  buyer          User             @relation("buyedArticles", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  company        User             @relation("saledArticles", fields: [companyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ArticleCategories {
  id         String     @id @default(cuid())
  articleId  String
  categoryId String
  article    Article    @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category   Categories @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Categories {
  // dessert, drinks, pizza, indian, pasta, burger, salad, asian
  id                String              @id @default(cuid())
  ref               String              @unique
  name              String              @unique
  icon              String
  ArticleCategories ArticleCategories[]
}

enum OrderStatus {
  orderReceived
  inPreparation
  isBeingDelivered
  delivered
}

enum PaymentMethods {
  paypal
  bank
  bar
}

enum AccountType {
  user
  business
}
