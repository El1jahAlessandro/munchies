generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  forename    String?
  lastname    String?
  password    String
  profilePic  String?
  accountType AccountType
  article     Article[]
  orders      Orders[]
  createdAt   DateTime    @db.Timestamp()
  updatedAt   DateTime    @db.Timestamp()
}

model Article {
  id                  Int               @id @default(autoincrement())
  name                String
  price               Float             @db.DoublePrecision
  picture             String
  description         String
  ingredients         String
  userId              Int
  articleCategoriesId Int
  user                User?             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category            ArticleCategories @relation(fields: [articleCategoriesId], references: [id], onUpdate: Cascade)
  articleOrders       ArticleOrders[]
  createdAt           DateTime          @db.Timestamp()
  updatedAt           DateTime          @db.Timestamp()
}

model ArticleOrders {
  id        Int      @id @default(autoincrement())
  amount    Int
  articleId Int
  orderId   Int
  article   Article  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order     Orders   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @db.Timestamp()
  updatedAt DateTime @db.Timestamp()
}

model Orders {
  id            Int             @id @default(autoincrement())
  paymentMethod PaymentMethods
  status        OrderStatus
  userId        Int?
  articleOrders ArticleOrders[]
  user          User?           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt     DateTime        @db.Timestamp()
  updatedAt     DateTime        @db.Timestamp()
}

model ArticleCategories {
  // dessert, drinks, pizza, indian, pasta, burger, salad, asian
  id      Int       @id @default(autoincrement())
  name    String    @unique
  icon    String
  article Article[]
}

enum OrderStatus {
  inPreparation
  isDelivered
  delivered
}

enum PaymentMethods {
  paypal
  bank
  bar
}

enum AccountType {
  user
  business
}
