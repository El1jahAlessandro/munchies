generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  name        String
  password    String
  profilePic  String?
  accountType AccountType
  article     Article[]
  orders      Orders[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Article {
  id                Int                 @id @default(autoincrement())
  name              String
  price             Float               @db.DoublePrecision
  picture           String
  description       String
  ingredients       String
  userId            Int
  user              User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  articleOrders     OrdersArticles[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ArticleCategories ArticleCategories[]
}

model OrdersArticles {
  id        Int      @id @default(autoincrement())
  amount    Int
  articleId Int
  orderId   Int
  article   Article  @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order     Orders   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id             Int              @id @default(autoincrement())
  paymentMethod  PaymentMethods
  totalPrice     Int
  status         OrderStatus      @default(inPreparation)
  userId         Int?
  ordersArticles OrdersArticles[]
  user           User?            @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ArticleCategories {
  id         Int        @id @default(autoincrement())
  articleId  Int
  categoryId Int
  article    Article    @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category   Categories @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Categories {
  // dessert, drinks, pizza, indian, pasta, burger, salad, asian
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  icon              String
  ArticleCategories ArticleCategories[]
}

enum OrderStatus {
  inPreparation
  isDelivered
  delivered
}

enum PaymentMethods {
  paypal
  bank
  bar
}

enum AccountType {
  user
  business
}
